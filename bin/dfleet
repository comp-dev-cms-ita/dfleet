#!/opt/conda/bin/python3.9
from datetime import datetime, timedelta
import time
import typer
from typing import Optional, List
import os
import json
import dfleet.identity as identity
import dfleet.cluster as cluster

app = typer.Typer(help="Awesome CLI user manager.")
cluster_app = typer.Typer()
app.add_typer(cluster_app, name="cluster")

jhub_url_env = "JUPYTERHUB_HOST"
jhub_url = os.environ.get(jhub_url_env)

token_env = "JUPYTERHUB_API_TOKEN"
token = os.environ.get(token_env)

verbose = False

state = {"verbose": verbose, "token": token, "jhub_url": jhub_url}

__version__ = "0.0.2"


def version_callback(value: bool):
    if value:
        typer.echo(f"dfleet CLI Version: {__version__}")
        raise typer.Exit()


@app.command()
def whoami():
    """
    Get user information
    """
    try:
        id_dict = identity.whoami(token=state["token"], jhub_url=state["jhub_url"], verbose=state["verbose"]) 
    except Exception as ex:
        typer.echo(f"Failed to contact JupyterHub server: {ex}")
        raise typer.Exit(code=1)

    for k, v in id_dict.items():
        typer.echo(f"{k}: {v}")


@cluster_app.command()
def create(sitename: str = "HTCondor-T2_LNL_PD", adapt: str = '{"minimum": 10, "maximum": 50}', wait: bool = True, timeout: int = 300):

    try:
        adapt_dict = json.loads(adapt)
        cluster_dict = cluster.create(
            sitename=sitename,
            adapt=adapt_dict,
            token=state["token"],
            jhub_url=state["jhub_url"],
            verbose=state["verbose"])
    except Exception as ex:
        typer.echo(f"Failed to create cluster: {ex}")
        raise typer.Exit(code=1)

    if not wait: 
        if cluster_dict['job_status'] == "Running":
            typer.echo(f"Cluster id: {cluster_dict['id']}\nJob status: {cluster_dict['job_status']}\nDashboard url: {cluster_dict['dashboard_url']}\nScheduler address: {cluster_dict['scheduler_address']}")
        else:
            typer.echo(f"Cluster id: {cluster_dict['id']}\nJob status: {cluster_dict['job_status']}")
    else:
        start = datetime.now()
        while datetime.now() < start + timedelta(seconds=timeout):
            try:
                status_dict = cluster.status(
                    cluster_id=cluster_dict['id'],
                    token=state["token"],
                    jhub_url=state["jhub_url"],
                    verbose=state["verbose"])
            except Exception as ex:
                typer.echo(f"Failed to create cluster: {ex}")
                raise typer.Exit(code=1)

            if status_dict['job_status'] != "Running":
                typer.echo(f"job_status: {status_dict['job_status']}")
                time.sleep(10)
            else:
                typer.echo(f"Cluster id: {status_dict['id']}\nJob status: {status_dict['job_status']}\nDashboard url: {status_dict['dashboard_url']}\nScheduler address: {status_dict['scheduler_address']}")

                # cluster running. now apply adapt
                try:
                    cluster.edit(
                        cluster_id=status_dict['id'],
                        adapt=adapt_dict,
                        token=state["token"],
                        jhub_url=state["jhub_url"],
                        verbose=state["verbose"]
                        )
                except Exception as ex:
                    typer.echo(f"Failed to patch cluster: {ex}")
                    raise typer.Exit(code=1)
                break

        if datetime.now() > start + timedelta(seconds=timeout):
            typer.echo("Timeout waiting for cluster to come up... Deleting it...")
            try:
                cluster.delete(
                    cluster_id=cluster_dict['id'],
                    token=state["token"],
                    jhub_url=state["jhub_url"],
                    verbose=state["verbose"])
            except Exception as ex:
                typer.echo(f"Failed to delete cluster: {ex}")
                raise typer.Exit(code=1)

            typer.echo(f"Deleted cluster {cluster_dict['id']}")
            typer.Exit(code=1)


    # TODO: --wait and --timeout. When ready adapt? rather fix it in dask remote. If timeout delete cluster

@cluster_app.command()
def status(cluster_id: str):
    try:
        cluster_dict = cluster.status(
            cluster_id=cluster_id,
            token=state["token"],
            jhub_url=state["jhub_url"],
            verbose=state["verbose"]) 
    except Exception as ex:
        typer.echo(f"Failed to create cluster: {ex}")
        raise typer.Exit(code=1)

    if cluster_dict['job_status'] == "Running":
        typer.echo(f"Cluster id: {cluster_dict['id']}\nJob status: {cluster_dict['job_status']}\nWorkers:{cluster_dict['workers']}\nDashboard url: {cluster_dict['dashboard_url']}\nScheduler address: {cluster_dict['scheduler_address']}")
    else:
        typer.echo(f"Cluster id: {cluster_dict['id']}\nJob status: {cluster_dict['job_status']}\nWorkers:{cluster_dict['workers']}")

    # TODO: insert --wait option


@cluster_app.command()
def list():
    try:
        cluster_dict = cluster.list(
            token=state["token"],
            jhub_url=state["jhub_url"],
            verbose=state["verbose"]) 
    except Exception as ex:
        typer.echo(f"Failed to create cluster: {ex}")
        raise typer.Exit(code=1)

    for cl in cluster_dict:
        typer.echo(f"{cl['id']} - {cl['name']}: workers {cl['workers']}")


@cluster_app.command()
def edit(cluster_id: str, adapt: str = None, workers: int = None):

    try:
        adapt_dict = None
        if adapt:
            adapt_dict = json.loads(adapt)
        cluster.edit(
            cluster_id=cluster_id,
            adapt=adapt_dict,
            workers=workers,
            token=state["token"],
            jhub_url=state["jhub_url"],
            verbose=state["verbose"]
            )
    except Exception as ex:
        typer.echo(f"Failed to patch cluster: {ex}")
        raise typer.Exit(code=1)

    typer.echo(f"{cluster_id} updated.")


@cluster_app.command()
def delete(cluster_id_list: Optional[List[str]]):
    for cluster_id in cluster_id_list:
        try:
            cluster.delete(
                cluster_id=cluster_id,
                token=state["token"],
                jhub_url=state["jhub_url"],
                verbose=state["verbose"]) 
        except Exception as ex:
            typer.echo(f"Failed to delete cluster: {ex}")
            raise typer.Exit(code=1)

        typer.echo(f"Deleted cluster {cluster_id}")


@app.callback()
def main(
    verbose: bool = False,
    token: str = state["token"],
    jhub_url: str = state["jhub_url"],
    version: Optional[bool] = typer.Option(
        None, "--version", callback=version_callback, is_eager=True
    )
    ):
    """
    Manage DASK clusters in an awesome CLI app.
    """
    if verbose:
        typer.echo("Will write verbose output")
        state["verbose"] = True

    if not token:
        typer.echo(f"No Jupyterhub token found. Please specifiy one either by {token_env} env or via --token global option")
        raise typer.Exit(code=1)
    else:
        state["token"] = token

    if not jhub_url:
        typer.echo(f"No Jupyterhub endpointi specified. Please specifiy one either by {jhub_url_env} env or via --jhub_url global option")
        raise typer.Exit(code=1)
    else:
        state["jhub_url"] = jhub_url


if __name__ == "__main__":
    app()
